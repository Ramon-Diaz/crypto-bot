# Crypto Bot Project

This repository contains a Dockerized solution for pulling cryptocurrency data from exchanges, storing it in a MySQL database, and visualizing it using a Dash app. The architecture includes Spark for distributed data processing and Jupyter for exploratory analysis.

## Features

- **Dockerized Spark Cluster**: 1 Spark master and 2 Spark workers.
- **MySQL Database**: Stores cryptocurrency OHLCV data.
- **Jupyter Notebook**: Provides an interface for data exploration with PySpark.
- **Dash App**: Displays real-time cryptocurrency price data.
- **Automatic Data Collection**: Uses Binance API to update prices every minute.

## Project Structure

```
crypto-bot/
│── docker-compose.yml
│── Dockerfile (for Jupyter)
│── dashApp/
│   └── app.py (Dash App implementation)
│── mysql-init/
│   └── init.sql (Initial database setup)
└── data/ (CSV data directory)
└── scripts/
    └── load_csv_to_mysql.py (Imports historical CSVs to MySQL)
    └── update_crypto.py (Pulls continuous data from Binance)
```

## Prerequisites

- Docker and Docker Compose installed.

## Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/crypto-bot.git
   cd crypto-bot
   ```
2. Build the Docker images and start the containers:
   ```bash
   docker-compose up --build
   ```

## Usage

- **Jupyter Notebook**: Accessible at `http://localhost:8888/jupyter/`
- **Dash App**: Accessible at `http://localhost:8050`
- **MySQL Database**: Accessible at `localhost:3306` with credentials:
  - User: `ramon`
  - Password: `yhn23edAasw`
  - Database: `crypto_data`

## Scripts

### `load_csv_to_mysql.py`

- Loads historical OHLCVT data from CSV files into MySQL.
- Creates separate tables for each currency.

### `update_crypto.py`

- Continuously fetches real-time OHLCV data from Binance using `ccxt`.
- Updates the MySQL tables every minute.

## Example Query

To inspect the latest BTC prices in MySQL:

```sql
SELECT * FROM BTCUSD ORDER BY datetime DESC LIMIT 5;
```

## Improvements (Future Work)

- Add unit tests for data import scripts.
- Enable secure MySQL access and remove hardcoded credentials.
- Implement Spark jobs for large-scale analytics.
- Add Docker volumes for persistent Jupyter notebooks.
- Create automated alerts for significant price changes.

## Contributions

Contributions are welcome! Please fork the repository and submit a pull request.

---

Created by Ramon Diaz-Ramos.
