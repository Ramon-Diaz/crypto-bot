# Crypto Bot Project

This repository contains a Dockerized solution for pulling cryptocurrency data from exchanges, storing it in a MySQL database, and visualizing it using a Dash app. The architecture includes Spark for distributed data processing and Jupyter for exploratory analysis.

## Features

- **Dockerized Spark Cluster**: 1 Spark master and 2 Spark workers.
- **MySQL Database**: Stores cryptocurrency OHLCV data.
- **Jupyter Notebook**: Provides an interface for data exploration with PySpark.
- **Dash App**: Displays real-time cryptocurrency price data.
- **Automatic Data Collection**: Uses Binance API to update prices every minute.

## Project Structure

```
crypto-bot/
│── docker-compose.yml
│── Dockerfile (for Jupyter)
│── dashApp/
│   └── app.py (Dash App implementation)
│── mysql-init/
│   └── init.sql (Initial database setup)
└── data/ (CSV data directory)
└── scripts/
    └── load_csv_to_mysql.py (Imports historical CSVs to MySQL)
    └── update_crypto.py (Pulls continuous data from Binance)
```

## Prerequisites

- Docker and Docker Compose installed.

## Installation

1. Clone the repository:
   ```bash
   git clone https://github.com/yourusername/crypto-bot.git
   cd crypto-bot
   ```
2. Build the Docker images and start the containers:
   ```bash
   docker-compose up --build
   ```

## Usage

- **Jupyter Notebook**: Accessible at `http://localhost:8888/jupyter/`
- **Dash App**: Accessible at `http://localhost:8050`
- **MySQL Database**: Accessible at `localhost:3306` with credentials:
  - User: `ramon`
  - Password: `yhn23edAasw`
  - Database: `crypto_data`

## Scripts

### `load_csv_to_mysql.py`

- Loads historical OHLCVT data from CSV files into MySQL.
- Creates separate tables for each currency.

### `update_crypto.py`

- Continuously fetches real-time OHLCV data from Binance using `ccxt`.
- Updates the MySQL tables every minute.

## Example Query

To inspect the latest BTC prices in MySQL:

```sql
SELECT * FROM BTCUSD ORDER BY datetime DESC LIMIT 5;
```

## Improvements (Future Work)

- Add unit tests for data import scripts.
- Enable secure MySQL access and remove hardcoded credentials.
- Implement Spark jobs for large-scale analytics.
- Add Docker volumes for persistent Jupyter notebooks.
- Create automated alerts for significant price changes.

## Contributions

Contributions are welcome! Please fork the repository and submit a pull request.

---

Created by Ramon Diaz-Ramos.




# Creating environment with python

$ python3 -m venv crypto-bot_venv
$ pip install -r requirements.txt

# Download data from Kraken site to push to SQL

## Kraken_OHLCVT

https://support.kraken.com/hc/en-us/articles/360047124832-Downloadable-historical-OHLCVT-Open-High-Low-Close-Volume-Trades-data

Downloadable historical OHLCVT (Open, High, Low, Close, Volume, Trades) data
OHLCVT data is the API equivalent to the candlesticks that are displayed on graphical charts (such as the Kraken Pro trading interface).
OHLCVT stands for Open, High, Low, Close, Volume and Trades and represents the following trading information within each time frame (such as one minute, five minute, hourly, daily, etc.):
Open - the first traded price
High - the highest traded price
Low - the lowest traded price
Close - the final traded price
Volume - the total volume traded by all trades
Trades - the number of individual trades
We provide downloadable CSV (comma separated) files containing OHLCVT data for each of our currency pairs from the beginning of each market up to the present (currently the end of Q1 2024).
Each ZIP file contains the relevant CSV files for 1, 5, 15, 30, 60, 240, 720 and 1440 minute intervals, which can be viewed in a text editor, used in code, converted into other formats (such as JSON, XML, etc.) or imported into a graphical charting application.
Note that the OHLCVT data only includes entries for intervals when trades happened, so any missing candlesticks indicate that no trades occurred during those intervals. Charting software often provides an option to display/hide empty intervals, which could be used to replace the missing candlesticks if needed.

## Kraken_Trading_History

https://support.kraken.com/hc/en-us/articles/360047543791-Downloadable-historical-market-data-time-and-sales-

Downloadable historical market data (time and sales)
Historical market data (also known as trading history, time and sales or tick data) provides a detailed record of every trade that happens on our markets, including the following information:
the exact date and time of each trade,
the price at which each trade occurred,
the amount of volume that was traded.

CREATE TABLE historical_market_data (
    id INT AUTO_INCREMENT PRIMARY KEY,
    currency VARCHAR(10) NOT NULL,
    datetime DATETIME NOT NULL,
    price DECIMAL(18, 8) NOT NULL,
    volume DECIMAL(18, 8) NOT NULL
);

# Save the credentials in your environment variables

# Install MySQL, create database, and users

# If you are using Mac you need to setup env variables with:

$ echo 'export PATH="$PATH:/usr/local/mysql/bin"' >> ~/.zprofile
$ source ~/.zprofile

# Now you can use mysql directly in terminal.

These are the top 10 crypto currencies that are known for their liquidity, trading volumes, and volatility, making them suitable for daily trading

- Bitcoin (BTC)
- Ethereum (ETH)
- Ripple (XRP)
- Binance Coin (BNB)
- Cardano (ADA)
- Solana (SOL)
- Dogecoin (DOGE)
- Polygon (MATIC)
- Chainlink (LINK)
- Litecoin (LTC)

